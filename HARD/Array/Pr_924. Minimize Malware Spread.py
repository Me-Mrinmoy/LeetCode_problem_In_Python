class Solution:
    def minMalwareSpread(self, graph, initial):
        n = len(graph)
        parent = [i for i in range(n)]

        # DSU (Disjoint Set Union)
        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]

        def union(x, y):
            parent[find(x)] = find(y)

        # Build connected components
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    union(i, j)

        # Count sizes of each component
        size = {}
        for i in range(n):
            root = find(i)
            size[root] = size.get(root, 0) + 1

        # Count malware in each component
        count = {}
        for node in initial:
            root = find(node)
            count[root] = count.get(root, 0) + 1

        # Choose best node to remove
        ans = min(initial)  # default: smallest index if tie
        max_size = -1
        for node in initial:
            root = find(node)
            if count[root] == 1:  # unique malware in this component
                if size[root] > max_size or (size[root] == max_size and node < ans):
                    max_size = size[root]
                    ans = node

        return ans
